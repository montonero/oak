###############################################################################
 #
 # Oak game engine
 # Copyright (c) 2013 Remi Papillie
 #
 # Permission is hereby granted, free of charge, to any person obtaining a
 # copy of this software and associated documentation files (the "Software"),
 # to deal in the Software without restriction, including without limitation
 # the rights to use, copy, modify, merge, publish, distribute, sublicense,
 # and/or sell copies of the Software, and to permit persons to whom the
 # Software is furnished to do so, subject to the following conditions:
 #
 # The above copyright notice and this permission notice shall be included in
 # all copies or substantial portions of the Software.
 #
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 # THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 # FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 # DEALINGS IN THE SOFTWARE.
 # 
###############################################################################

import os

def build(ctx):
	# GLFW
	glfwSources = ctx.path.ant_glob("glfw-2.7.8/lib/*.c") + ctx.path.ant_glob("glfw-2.7.8/lib/win32/*.c")
	glfwIncludes = ["glfw-2.7.8/lib", "glfw-2.7.8/lib/win32"]
	glfwDefines = ["GLFW_BUILD_DLL", "_GLFW_NO_DLOAD_GDI32", "_GLFW_NO_DLOAD_WINMM", "GLFW_NO_GLU"]
	glfwLibs = ["opengl32", "winmm", "gdi32", "user32"]
	ctx.shlib(
		target = os.path.join("..", "glfw"),
		source = glfwSources,
		includes = glfwIncludes,
		defines = glfwDefines,
		lib = glfwLibs,
		
		name = "glfw",
		export_includes = "glfw-2.7.8/include",
		export_defines = ["GLFW_DLL", "GLFW_NO_GLU"]
	)
	
	# GLM (header-only)
	ctx(
		name = "glm",
		export_includes = "glm-0.9.4.3",
	)
	
	# GLEW
	glewSources = ["glew-1.9.0/src/glew.c"]
	glewIncludes = ["glew-1.9.0/include"]
	glewDefines = ["GLEW_NO_GLU", "GLEW_STATIC"]
	glewLibs = []
	ctx.stlib(
		target = os.path.join("..", "glew"),
		source = glewSources,
		includes = glewIncludes,
		defines = glewDefines,
		lib = glewLibs,
		
		name = "glew",
		export_includes = "glew-1.9.0/include",
		export_defines = ["GLEW_NO_GLU", "GLEW_STATIC"]
	)
	
	# Lua
	luaSources = ctx.path.ant_glob("lua-5.2.2/src/*.c", excl = ["lua-5.2.2/src/lua.c", "lua-5.2.2/src/luac.c"])
	luaIncludes = ["lua-5.2.2/src"]
	if ctx.env.TARGET_OS == "android9":
		luaDefines = ["getlocaledecpoint()=(',')"] # workaround for android libc
	else:
		luaDefines = []
	luaLibs = []
	ctx.stlib(
		target = os.path.join("..", "lua"),
		source = luaSources,
		includes = luaIncludes,
		defines = luaDefines,
		lib = luaLibs,
		
		name = "lua",
		export_includes = "lua-5.2.2/src",
		export_defines = []
	)
